// Generated by view binder compiler. Do not edit!
package com.example.firebasetest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.firebasetest.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMyTransactionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnBackSpace;

  @NonNull
  public final Button btnConfirm;

  @NonNull
  public final Button btnMevent;

  @NonNull
  public final Button btnMyBuy;

  @NonNull
  public final Button btnMyFree;

  @NonNull
  public final Button btnMySell;

  @NonNull
  public final TextView textView;

  @NonNull
  public final Toolbar toolbar;

  private ActivityMyTransactionBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnBackSpace, @NonNull Button btnConfirm, @NonNull Button btnMevent,
      @NonNull Button btnMyBuy, @NonNull Button btnMyFree, @NonNull Button btnMySell,
      @NonNull TextView textView, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.btnBackSpace = btnBackSpace;
    this.btnConfirm = btnConfirm;
    this.btnMevent = btnMevent;
    this.btnMyBuy = btnMyBuy;
    this.btnMyFree = btnMyFree;
    this.btnMySell = btnMySell;
    this.textView = textView;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMyTransactionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMyTransactionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_my_transaction, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMyTransactionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_backSpace;
      Button btnBackSpace = ViewBindings.findChildViewById(rootView, id);
      if (btnBackSpace == null) {
        break missingId;
      }

      id = R.id.btn_confirm;
      Button btnConfirm = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirm == null) {
        break missingId;
      }

      id = R.id.btn_mevent;
      Button btnMevent = ViewBindings.findChildViewById(rootView, id);
      if (btnMevent == null) {
        break missingId;
      }

      id = R.id.btn_myBuy;
      Button btnMyBuy = ViewBindings.findChildViewById(rootView, id);
      if (btnMyBuy == null) {
        break missingId;
      }

      id = R.id.btn_myFree;
      Button btnMyFree = ViewBindings.findChildViewById(rootView, id);
      if (btnMyFree == null) {
        break missingId;
      }

      id = R.id.btn_mySell;
      Button btnMySell = ViewBindings.findChildViewById(rootView, id);
      if (btnMySell == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMyTransactionBinding((ConstraintLayout) rootView, btnBackSpace, btnConfirm,
          btnMevent, btnMyBuy, btnMyFree, btnMySell, textView, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
